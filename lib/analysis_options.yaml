# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.

# It is based on:
# - package:flutter_lints (therefore also package:lints)
# - my favorite lint rules which are not present in package:flutter_lints

include: package:flutter_lints/flutter.yaml

analyzer:
  language:
    strict-casts: true
    strict-raw-types: true
  exclude:
    - example/**
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - '**/*.config.dart'

linter:
  rules:
    - avoid_empty_else
    - avoid_relative_lib_imports
    - avoid_returning_null
    - avoid_returning_this
    - avoid_types_as_parameter_names
    - avoid_unused_constructor_parameters
    - await_only_futures
    - camel_case_types
    - cancel_subscriptions
    - cascade_invocations
    - comment_references
    - directives_ordering
    - empty_catches
    - hash_and_equals
    - collection_methods_unrelated_type
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - non_constant_identifier_names
    - omit_local_variable_types
    - package_api_docs
    - package_prefixed_library_names
    - prefer_final_locals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_single_quotes
    - prefer_typing_uninitialized_variables
    - prefer_relative_imports
    - prefer_mixin
    - sized_box_shrink_expand
    - sort_constructors_first
    - test_types_in_equals
    - throw_in_finally
    - unawaited_futures
    - unnecessary_lambdas
    - unnecessary_null_aware_assignments
    - unnecessary_statements
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unrelated_type_equality_checks
    - use_enums
    - use_colored_box
    - use_decorated_box
    - use_super_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_string_buffers
    - use_to_and_as_if_applicable
    - valid_regexps